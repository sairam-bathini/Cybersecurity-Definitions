Input Validation:

	Validate user inputs to prevent injection attacks (e.g., SQL injection, XSS).
	Use parameterized queries and prepared statements to mitigate SQL injection risks.
	Conduct input validation on a trusted server side, not the client side.
	Identify and classify data sources into trusted and untrusted.
	Validate data from untrusted sources (databases, file streams, etc.).
	Use a centralized input validation routine for the entire application.
	Specify character sets (e.g., UTF-8) for all input sources (canonicalization).
	Encode input to a common character set before validating.
	Ensure all validation failures result in input rejection.
	Support UTF-8 extended character sets and validate after UTF-8 decoding.
	Validate client-provided data before processing.
	Verify that protocol header values contain only ASCII characters.
	Validate data from redirects.
	Use an "allow" list for expected data types rather than a "deny" list.
	Validate data range and length.
	Implement additional controls for potentially hazardous input.
	Use extra discrete checks if the standard validation routine is insufficient.
	Utilize canonicalization to address obfuscation attacks.

Output Encoding:

	Encode user input when displaying it in web applications to prevent XSS attacks.
	Use appropriate output encoding functions provided by your programming language or framework.
	Conduct all output encoding on a trusted system (server side, not client side).
	Utilize a standard, tested routine for each type of outbound encoding.
	Specify character sets, such as UTF-8, for all outputs.
	Contextually output encodes all data returned to the client from untrusted sources.
	Ensure the output encoding is safe for all target systems.
	Contextually sanitize all output of un-trusted data to queries for SQL, XML, and LDAP.
	Sanitize all output of untrusted data to operating system commands.

Authentication and Authorization:

	Implement strong authentication mechanisms (e.g., multi-factor authentication).
	Enforce the principle of least privilege to ensure users have only the necessary access rights.
	Require authentication for all pages and resources, except those specifically intended to be public.
	All authentication controls must be enforced on a trusted system.
	Establish and utilize standard, tested, authentication services whenever possible.
	Use a centralized implementation for all authentication controls, including libraries that call external authentication services
	Segregate authentication logic from the resource being requested and use redirection to and from the centralized authentication control
	All authentication controls should fail securely
	All administrative and account management functions must be at least as secure as the primary authentication mechanism
	If your application manages a credential store, use cryptographically strong one-way salted hashes.
	Password hashing must be implemented on a trusted system server side, not the client side)
	Validate the authentication data only on completion of all data input.
	Authentication failure responses should not indicate which part of the authentication data was incorrect.
	Utilize authentication for connections to external systems that involve sensitive information or functions.
	Authentication credentials for accessing services external to the application should be stored in a secure store.
	Use only HTTP POST requests to transmit authentication credentials.
	Only send non-temporary passwords over an encrypted connection or as encrypted data.
	Enforce password complexity requirements established by policy or regulation.
	Enforce password length requirements established by policy or regulation.
	Password entry should be obscured on the user's screen.
	Enforce account disabling after an established number of invalid login attempts.
	Password reset and changing operations require the same level of control as account creation and authentication.
	Password reset questions should support sufficiently random answers.
	If using email-based resets, only send email to a pre-registered address with a temporary link/password.
	Temporary passwords and links should have a short expiration time.
	Enforce the changing of temporary passwords on the next use.
	Notify users when a password reset occurs.
	Prevent password re-use.
	Passwords should be at least one day old before they can be changed, to prevent attacks on password re-use.
	Enforce password changes based on requirements established in policy or regulation, with the time between resets administratively controlled.
	Disable the "remember me" functionality for password fields.
	The last use (successful or unsuccessful) of a user account should be reported to the user at their next successful login.
	Implement monitoring to identify attacks against multiple user accounts, utilizing the same password.
	Change all vendor-supplied default passwords and user IDs or disable the associated accounts.
	Re-authenticate users before performing critical operations.
	Use Multi-Factor Authentication for highly sensitive or high-value transactional accounts.
	If using third-party code for authentication, inspect the code carefully to ensure it is not affected by any malicious code.
Access control:

	Utilize trusted system objects for access authorization decisions.
	Employ a single site-wide component for checking access authorization, covering libraries calling external services.
	Ensure access controls fail securely.
	Deny all access if the application cannot retrieve security configuration information.
	Enforce authorization controls on every request, including server-side scripts.
	Segregate privileged logic from other application codes.
	Restrict access to files and resources to authorized users.
	Limit access to protected URLs and functions to authorized users.
	Control direct object references, services, and application data access.
	Restrict access to user attributes, data, and security configuration information.
	Ensure consistency between server-side implementation and presentation layer representations of access control rules.
	If storing state data on the client, use encryption and integrity checking on the server side.
	Enforce application logic flows to comply with business rules.
	Limit user or device transactions to deter automated attacks.
	Use the "referrer" header as a supplemental check, not the sole authorization check.
	Periodically re-validate long authenticated sessions to detect privilege changes.
	Implement account auditing and disable unused accounts.
	Support disabling accounts and terminating sessions when authorization ceases.
	Assign the least privilege to service accounts and those connecting with external systems.
	Create an Access Control Policy documenting business rules, data types, and access authorization criteria for proper provisioning and control.

Session Management:

	Implement secure session management, utilizing well-vetted algorithms for random session identifiers.
	Rotate session tokens regularly and set session timeout mechanisms.
	Ensure session identifier creation occurs server-side on trusted systems.
	Restrict cookies' domain and path for authenticated session identifiers appropriately.
	Logout functionality should terminate sessions fully and be accessible from all authorized pages.
	Set a short session inactivity timeout, balancing risk and business requirements.
	Disallow persistent logins, enforce periodic session terminations, and generate new identifiers on re-authentication.
	Prevent concurrent logins with the same user ID.
	Avoid exposing session identifiers in URLs, error messages, or logs.
	Implement access controls to protect server-side session data.
	Periodically generate new session identifiers and deactivate old ones.
	Generate a new session identifier if the connection security changes from HTTP to HTTPS.
	Consistently use HTTPS, and supplement session management for sensitive operations with strong random tokens.
	For highly sensitive operations, use per-request strong random tokens.
	Set the "secure" attribute for cookies transmitted over a TLS connection.
	Set cookies with the HTTP Only attribute, unless required for client-side scripts.

Database security:

	Use strongly typed parameterized queries
	Utilize input validation and output encoding and be sure to address metacharacters. If these fail, do not run the database command
	Ensure that variables are strongly typed
	The application should use the lowest possible level of privilege when accessing the database
	Use secure credentials for database access.
	Connection strings should not be hard coded within the application. Connection strings should be stored in a separate configuration file on a trusted system and they should be encrypted.
	Use stored procedures to abstract data access and allow for the removal of permissions to the base tables in the database.
	Close the connection as soon as possible.
	Remove or change all default database administrative passwords.
	Turn off all unnecessary database functionality.
	Remove unnecessary default vendor content (for example sample schemas).
	Disable any default accounts that are not required to support business requirements.
	The application should connect to the database with different credentials for every trust distinction (for example user, read-only user, guest, administrator).

Error Handling:

	Avoid exposing sensitive information in error messages.
	Implement custom error pages and log errors internally with relevant details.
	Use error handlers that do not display debugging or stack trace information
	The application should handle application errors and not rely on the server configuration
	Properly free allocated memory when error conditions occur
	Error handling logic associated with security controls should deny access by default
	All logging controls should be implemented on a trusted system
	Logging controls should support both success and failure of specified security events
	Ensure logs contain important log event data
	Ensure log entries that include un-trusted data will not execute as code in the intended log viewing interface or software
	Restrict access to logs to only authorized individuals
	Utilize a central routine for all logging operations
	Do not store sensitive information in logs, including unnecessary system details, session identifiers or passwords
	Ensure that a mechanism exists to conduct log analysis
	Log all input validation failures
	Log all authentication attempts, especially failures
	Log all access control failures
	Log all apparent tampering events, including unexpected changes to state data
	Log attempts to connect with invalid or expired session tokens
	Log all system exceptions
	Log all administrative functions, including changes to the security configuration settings
	Log all backend TLS connection failures
	Log cryptographic module failures
	Use a cryptographic hash function to validate log entry integrity

Data Encryption:

	Use strong encryption algorithms for sensitive data in transit (e.g., HTTPS).
	Encrypt sensitive data at rest using appropriate encryption mechanisms.
	All cryptographic functions used to protect secrets from the application user must be implemented on a trusted system.
	Protect secrets from unauthorized access.
	Cryptographic modules should fail securely.
	All random numbers, random file names, random GUIDs, and random strings should be generated using the cryptographic module’s approved random number generator.
	Cryptographic modules used by the application should be compliant with FIPS 140-2 or an equivalent standard.
	Establish and utilize a policy and process for how cryptographic keys will be managed.


Secure File Handling:

	Validate file uploads to ensure they meet the expected criteria.
	Store uploaded files in a location that is not directly accessible by users.
	Do not pass user-supplied data directly to any dynamic including function
	Require authentication before allowing a file to be uploaded
	Limit the type of files that can be uploaded to only those types that are needed for business purposes
	Validate uploaded files are the expected type by checking file headers rather than by file extension
	Do not save files in the same web context as the application
	Prevent or restrict the uploading of any file that may be interpreted by the web server.
	Turn off execution privileges on file upload directories
	Implement safe uploading in UNIX by mounting the targeted file directory as a logical drive using the associated path or the chrooted environment
	When referencing existing files, use an allowed list of allowed file names and types
	Do not pass user-supplied data into a dynamic redirect
	Do not pass directory or file paths, use index values mapped to a pre-defined list of paths
	Never send the absolute file path to the client
	Ensure application files and resources are read-only
	Scan user-uploaded files for viruses and malware

Secure Coding Libraries:

•	Use well-established and regularly updated libraries and frameworks.
•	Keep libraries and dependencies up-to-date to patch known vulnerabilities.

Secure Configuration:

•	Configure servers, databases, and other components securely.
•	Disable unnecessary services and features to minimize the attack surface.

Patch Management:

•	Establish a patch management process to promptly apply security updates.
•	Monitor security advisories for your software stack and act accordingly.


